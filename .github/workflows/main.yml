name: Deploy Service

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch to fetch environment files from"
        required: true
        default: "unified-env-lts"
      env_file:
        description: "Environment file to use (set manually after fetching the list)"
        required: true
      cluster_name:
        description: "EKS cluster name to log in to"
        required: true
      region:
        description: "AWS region of the EKS cluster"
        required: true
        default: "ap-south-1"
      app_docker_image:
        description: "App Docker image to deploy"
        required: true
      db_docker_image:
        description: "Database Docker image to deploy"
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy-docker-image:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the branch
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch_name }}

      # Step 2: Fetch and Source the Env File
      - name: Fetch and Source Env File
        id: fetch_env
        run: |
          ENV_FILE_PATH="./deploy-as-code/helm/environments/${{ github.event.inputs.env_file }}"
          
          if [ ! -f "$ENV_FILE_PATH" ]; then
            echo "Error: The specified environment file $ENV_FILE_PATH does not exist"
            exit 1
          fi
          
          echo "Using environment file: $ENV_FILE_PATH"
          
          # Extract domain name under the global section using yq
          DOMAIN_NAME=$(yq e '.global.domain' $ENV_FILE_PATH)
          
          if [ -z "$DOMAIN_NAME" ]; then
            echo "Error: Domain name not found in the environment file"
            exit 1
          fi
          
          echo "Domain Name: $DOMAIN_NAME"
          
          # Export the variable for use later in the workflow
          echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV

      # Step 3: Install or Update AWS CLI
      - name: Install or Update AWS CLI
        run: |
          if aws --version &>/dev/null; then
            echo "AWS CLI is already installed. Skipping installation."
          else
            echo "AWS CLI not found. Installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      # Step 4: Configure AWS CLI
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region ${{ github.event.inputs.region }}

      # Step 5: Generate kubeconfig for EKS
      - name: Generate kubeconfig for EKS
        run: |
          echo "Generating kubeconfig for EKS cluster: ${{ github.event.inputs.cluster_name }}"
          aws eks update-kubeconfig --name ${{ github.event.inputs.cluster_name }} --region ${{ github.event.inputs.region }}
          kubectl config view

      # Step 6: Verify Cluster Login
      - name: Verify Cluster Login
        run: |
          echo "Attempting to log in to Kubernetes cluster"
          kubectl get nodes

      # Step 7: Deploy App and Database Using Helm
      - name: Deploy App and Database
        run: |
          # Extract image details
          APP_DOCKER_IMAGE=${{ github.event.inputs.app_docker_image }}
          DB_DOCKER_IMAGE=${{ github.event.inputs.db_docker_image }}
          
          # Validate image tags
          if [[ ! "$APP_DOCKER_IMAGE" =~ : ]]; then
              echo "Error: App Docker image must include a tag."
              exit 1
          fi
          if [[ ! "$DB_DOCKER_IMAGE" =~ : ]]; then
              echo "Error: DB Docker image must include a tag."
              exit 1
          fi
          
          # Extract service name and tag
          SERVICE_NAME=$(echo "$APP_DOCKER_IMAGE" | cut -d':' -f1)
          APP_IMAGE_TAG=$(echo "$APP_DOCKER_IMAGE" | cut -d':' -f2)
          DB_IMAGE_TAG=$(echo "$DB_DOCKER_IMAGE" | cut -d':' -f2)
          
          # Define the base charts directory
          CHARTS_DIR="./deploy-as-code/helm/charts"
          
          # Search for the chart directory containing the service name
          CHART_DIR=$(find "$CHARTS_DIR" -type d -name "$SERVICE_NAME" -exec test -f {}/Chart.yaml \; -print -quit)
          
          if [ -z "$CHART_DIR" ]; then
              echo "Error: No Helm chart found for service '$SERVICE_NAME' in $CHARTS_DIR."
              exit 1
          fi
          
          echo "Found Helm chart for '$SERVICE_NAME' at: $CHART_DIR"
          
          # Build Helm chart dependencies
          helm dependency build "$CHART_DIR"
          
          # Detect namespace from Helm chart
          NAMESPACE=$(yq e '.namespace // "default"' "$CHART_DIR/values.yaml")
          
          echo "Using namespace: $NAMESPACE"
          
          # Deploy the service using Helm
          helm upgrade --install "$SERVICE_NAME" "$CHART_DIR" \
            --namespace "$NAMESPACE" \
            -f "$CHART_DIR/values.yaml" \
            --set app.image.repository=$(echo "$APP_DOCKER_IMAGE" | cut -d':' -f1) \
            --set app.image.tag="$APP_IMAGE_TAG" \
            --set db.image.repository=$(echo "$DB_DOCKER_IMAGE" | cut -d':' -f1) \
            --set db.image.tag="$DB_IMAGE_TAG" \
            --set global.domain="$DOMAIN_NAME"

      # Step 8: Verify Deployment
      - name: Verify Deployment
        run: |
          echo "Verifying deployment for service: $SERVICE_NAME in namespace: $NAMESPACE"
          kubectl rollout status deployment/$SERVICE_NAME --namespace="$NAMESPACE"
