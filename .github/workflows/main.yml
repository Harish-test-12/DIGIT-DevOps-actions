name: Deploy Service

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch to fetch environment files from"
        required: true
        default: "unified-env-lts"
      env_file:
        description: "Environment file to use (set manually after fetching the list)"
        required: true
      cluster_name:
        description: "EKS cluster name to log in to"
        required: true
      region:
        description: "AWS region of the EKS cluster"
        required: true
        default: "ap-south-1"
      docker_image:
        description: "Docker image to deploy (e.g., egov-mdms-service:core-2.9-lts)"
        required: true

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy-docker-image:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the branch
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch_name }}

      # Step 2: Fetch and Source the Env File
      - name: Fetch and Source Env File
        id: fetch_env
        run: |
          ENV_FILE_PATH="./deploy-as-code/helm/environments/${{ github.event.inputs.env_file }}"
          if [ ! -f "$ENV_FILE_PATH" ]; then
            echo "Error: The specified environment file $ENV_FILE_PATH does not exist"
            exit 1
          fi
          echo "Using environment file: $ENV_FILE_PATH"
          
          # Parse YAML using yq and export variables
          export MY_VAR=$(yq e '.global.my_var' $ENV_FILE_PATH)
          
          # Print the environment variable to verify
          echo "MY_VAR: $MY_VAR"


      # Step 3: Install AWS CLI
      - name: Install or Update AWS CLI v2
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed, updating..."
            sudo ./aws/install --update
          fi
          aws --version


      # Step 4: Configure AWS CLI
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region ${{ github.event.inputs.region }}

      # Step 5: Generate kubeconfig for EKS
      - name: Generate kubeconfig for EKS
        run: |
          echo "Generating kubeconfig for EKS cluster: ${{ github.event.inputs.cluster_name }}"
          aws eks update-kubeconfig --name ${{ github.event.inputs.cluster_name }} --region ${{ github.event.inputs.region }}
          kubectl config view

      # Step 6: Verify Cluster Login
      - name: Verify Cluster Login
        run: |
          echo "Attempting to log in to Kubernetes cluster"
          kubectl get nodes

      # Step 7: Deploy Service
      - name: Deploy Service
        id: deploy_service
        env:
          DOCKER_IMAGE: ${{ github.event.inputs.docker_image }}
        run: |
          # Input: Docker image name
          DOCKER_IMAGE=$DOCKER_IMAGE

          # Extract service name from the Docker image
          SERVICE_NAME=$(echo "$DOCKER_IMAGE" | cut -d':' -f1)

          # Define the base charts directory
          CHARTS_DIR="./deploy-as-code/helm/charts"

          # Search for the chart directory containing the service name
          CHART_DIR=$(find "$CHARTS_DIR" -type d -name "$SERVICE_NAME" -exec test -f {}/Chart.yaml \; -print -quit)

          if [ -z "$CHART_DIR" ]; then
              echo "Error: No Helm chart found for service '$SERVICE_NAME' in $CHARTS_DIR."
              exit 1
          fi

          echo "Found Helm chart for '$SERVICE_NAME' at: $CHART_DIR"

          # Deploy using Helm
          helm upgrade --install "$SERVICE_NAME" "$CHART_DIR" -f "$CHART_DIR/values.yaml"

      # Step 8: Verify Deployment
      - name: Verify Deployment
        run: |
          SERVICE_NAME=$(echo "${{ github.event.inputs.docker_image }}" | cut -d':' -f1)
          echo "Verifying deployment for service: $SERVICE_NAME"
          kubectl rollout status deployment/$SERVICE_NAME
